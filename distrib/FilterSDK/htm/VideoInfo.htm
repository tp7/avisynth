<!DOCTYPE html
          PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html   xmlns   = "http://www.w3.org/1999/xhtml">
<head>
<link rel="STYLESHEET" href="filtersdk.css" type="text/css" />
<title>VideoInfo - AviSynth</title>
</head>
<BODY>

<h1>VideoInfo</h1>

<p>VideoInfo provides basic information about the clip your filter receives.</p>
<a name="Getting_information_from_VideoInfo"></a>
<h2><span class="mw-headline">Getting information from VideoInfo</span></h2>
<a name="Video-related_information"></a>
<h3><span class="mw-headline">Video-related information</span></h3>
<pre>bool HasVideo();</pre>
<p>This will return true if there is any video in the given clip.</p>
<pre>bool IsRGB24();
bool IsRGB32();
bool IsRGB();</pre>
<p>This will return true if the colorspace is <a href="http://avisynth.org/mediawiki/RGB" title="RGB">RGB</a>
(in any way). The first two return true if the clip has the specific RGB
colorspace (<a href="ColorSpaces.htm" title="RGB24">RGB24</a> and <a href="ColorSpaces.htm" title="RGB32">RGB32</a>).
The third returns true for any RGB colorspace; future formats could also apply.</p>
<pre>bool IsYUY2();
bool IsYV12();
bool IsYUV();</pre>
<p>This will return true if the colorspace is <a href="ColorSpaces.htm" title="YUV">YUV</a>
(in any way). The first two return true if the clip has the specific YUV
colorspace (<a href="ColorSpaces.htm" title="YUY2">YUY2</a> and <a href="ColorSpaces.htm" title="YV12">YV12</a>).
The third returns true for any YUV colorspace; future formats could also apply.
Note that I420 is also reported as YV12, because planes are automatically
swapped.</p>
<pre>bool IsColorSpace(int c_space);</pre>
<p>This function will check if the colorspace (VideoInfo.pixel_type) is the same
as given c_space (or more general it checks for a <a href="ColorspaceProperties.htm" title="Colorspace property">Colorspace
property</a> (see avisynth.h)).</p>
<pre>bool IsSameColorspace(const VideoInfo&amp; vi2);</pre>
<p>This function will compare two VideoInfos, and check if the colorspace is the
same. Note: It does not check imagesize or similar properties.</p>
<pre>bool Is(int property);</pre>
<p>This function is reserved for future use. Currently works as IsColorSpace.</p>
<pre>bool IsPlanar();</pre>
<p>This will return true if the video is planar. For now only YV12 returns true,
but future formats might also do so. See the <a href="PlanarImageFormat.htm" title="Planar">Planar</a>
image format.</p>
<pre>bool IsFieldBased();</pre>
<p>This will return true if the video has been through a <a href="../../Docs/English/corefilters/separatefields.htm" title="SeparateFields">SeparateFields</a>,
and the video has not been <a href="../../Docs/English/corefilters/weave.htm" title="Weave">weaved</a>
yet. Otherwise it will return false.</p>
<pre>bool IsParityKnown();</pre>
<p>This will return true if the video parity is known.</p>
<pre>bool IsBFF();
bool IsTFF();</pre>
<p>This will return true if the video is bottom-field-first or top-field-first
respectively.</p>
<pre> void SetFieldBased(bool isfieldbased);</pre>
<p>This will set the field-based property to true (respectively false) if
isfieldbased=true (respectively false).</p>
<pre> void Set(int property);
 void Clear(int property);</pre>
<p>This sets respectively clears an image_type property like: IT_BFF, IT_TFF or
IT_FIELDBASED. See field.h for examples.</p>
<pre> int BitsPerPixel();</pre>
<p>This will return the number of bits per pixel. This can be:</p>
<table border="1" cellpadding="4">
  <tbody>
    <tr>
      <th width="50%">pixel_type</th>
      <th width="50%">nr of bits</th>
    </tr>
    <tr>
      <td>CS_BGR24</td>
      <td>24</td>
    </tr>
    <tr>
      <td>CS_BGR32</td>
      <td>32</td>
    </tr>
    <tr>
      <td>CS_YUY2</td>
      <td>16</td>
    </tr>
    <tr>
      <td>CS_YV12, CS_I420</td>
      <td>12</td>
    </tr>
  </tbody>
</table>
<pre> void SetFPS(unsigned numerator, unsigned denominator);</pre>
<p>This will set the framerate.</p>
<pre> void MulDivFPS(unsigned multiplier, unsigned divisor);</pre>
<p>This will multiply the denominator by <i>multiplier</i> and scale the
numerator and modified denominator.</p>
<p>There is some other useful information in VideoInfo structure (width, height,
fps_numerator, fps_denominator, num_frames, pixel_type and image_type). See
'avisynth.h' header file.</p>
<a name="Audio-related_information"></a>
<h3><span class="mw-headline">Audio-related information</span></h3>
<pre>bool HasAudio();</pre>
<p>This will return true if there is any audio in the given clip.</p>
<pre> int AudioChannels();</pre>
<p>This will return the number of audio channels.</p>
<pre> int SampleType();</pre>
<p>This will return the sampletype. This can be:</p>
<table border="1" cellpadding="4">
  <tbody>
    <tr>
      <th width="50%">pixel_type</th>
      <th width="50%">nr of bits</th>
    </tr>
    <tr>
      <td>SAMPLE_INT8</td>
      <td>1&lt;&lt;0</td>
    </tr>
    <tr>
      <td>SAMPLE_INT16</td>
      <td>1&lt;&lt;1</td>
    </tr>
    <tr>
      <td>SAMPLE_INT24</td>
      <td>1&lt;&lt;2</td>
    </tr>
    <tr>
      <td>SAMPLE_INT32</td>
      <td>1&lt;&lt;3</td>
    </tr>
    <tr>
      <td>SAMPLE_FLOAT</td>
      <td>1&lt;&lt;4</td>
    </tr>
  </tbody>
</table>
<pre> bool IsSampleType(int testtype);</pre>
<p>This function will check if the sampletype (VideoInfo.sample_type) is the
same as testtype.</p>
<pre> int SamplesPerSecond();</pre>
<p>This will return the number of bytes per second.</p>
<pre> int BytesPerAudioSample();</pre>
<p>This will return the number of bytes per sample:</p>
<pre> int BytesPerChannelSample()</pre>
<p>This will return the number of bytes per channel-sample. This can be:</p>
<table border="1" cellpadding="4">
  <tbody>
    <tr>
      <th width="50%">sample</th>
      <th width="50%">nr of bytes</th>
    </tr>
    <tr>
      <td>SAMPLE_INT8</td>
      <td>sizeof(signed char)</td>
    </tr>
    <tr>
      <td>SAMPLE_INT16</td>
      <td>sizeof(signed short)</td>
    </tr>
    <tr>
      <td>SAMPLE_INT24</td>
      <td>3</td>
    </tr>
    <tr>
      <td>SAMPLE_INT32</td>
      <td>sizeof(signed int)</td>
    </tr>
    <tr>
      <td>SAMPLE_FLOAT</td>
      <td>sizeof(SFLOAT)</td>
    </tr>
  </tbody>
</table>
<pre> __int64 AudioSamplesFromFrames(__int64 frames);</pre>
<p>This returns the number of audiosamples from the first <i>frames</i> frames.</p>
<pre> int FramesFromAudioSamples(__int64 samples);</pre>
<p>This returns the number of frames from the first <i>samples</i> audiosamples.</p>
<pre> __int64 AudioSamplesFromBytes(__int64 bytes);</pre>
<p>This returns the number of audiosamples from the first <i>bytes</i> bytes.</p>
<pre> __int64 BytesFromAudioSamples(__int64 samples);</pre>
<p>This returns the number of bytes from the first <i>samples</i> audiosamples.</p>
<p>There is some other useful information in VideoInfo structure
(audio_samples_per_second, sample_type, num_audio_samples and nchannels). See
'avisynth.h' header file.</p>

<h3>Back to <a href="InternalFunctions.htm">InternalFunctions</a></h3>
<p><kbd>$Date: 2013/04/22 07:18:44 $<br>
Original version of this document <a href="http://www.avisynth.org/VideoInfo">http://www.avisynth.org/VideoInfo</a>
</kbd></p>
</BODY>
</html>
